#!/bin/bash
#
# build-toolbox.sh - Build whereami RPMs using Fedora toolbox
#
# This script creates a Fedora container, installs all necessary
# dependencies, and runs the RPM build process inside the isolated environment.
#
# Usage:
#   ./scripts/build-toolbox.sh [OPTIONS]
#
# Options:
#   --fedora-version VERSION  Fedora version to use (default: 42)
#   --container-name NAME     Name for the container (default: whereami-build)
#   --clean                   Remove existing container before creating new one
#   --help                   Show this help message
#
# Requirements:
#   - podman installed
#   - Git repository with proper tags for versioning
#
# Environment variables:
#   FEDORA_VERSION   - Override default Fedora version
#   CONTAINER_NAME   - Override default container name
#

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default configuration
DEFAULT_FEDORA_VERSION="42"
DEFAULT_CONTAINER_NAME="whereami-build"
CACHE_VOLUME_NAME="whereami-go-cache"

# Configuration (can be overridden by environment or command line)
FEDORA_VERSION="${FEDORA_VERSION:-$DEFAULT_FEDORA_VERSION}"
CONTAINER_NAME="${CONTAINER_NAME:-$DEFAULT_CONTAINER_NAME}"
CLEAN_CONTAINER=false

# Script directory and project root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"

# Function to print colored messages
print_msg() {
    local color=$1
    shift
    echo -e "${color}$*${NC}"
}

print_error() {
    print_msg "$RED" "ERROR: $*" >&2
}

print_success() {
    print_msg "$GREEN" "✓ $*"
}

print_info() {
    print_msg "$BLUE" "ℹ $*"
}

print_warning() {
    print_msg "$YELLOW" "⚠ $*"
}

# Function to show usage
show_help() {
    cat << EOF
Usage: $0 [OPTIONS]

Build whereami RPMs using Fedora container (isolated from \$HOME).

OPTIONS:
    --fedora-version VERSION  Fedora version to use (default: $DEFAULT_FEDORA_VERSION)
    --container-name NAME     Name for container (default: $DEFAULT_CONTAINER_NAME)
    --clean                   Remove existing container before creating new one AND after build
    --help                   Show this help message

EXAMPLES:
    $0                                    # Build with defaults (keeps container)
    $0 --fedora-version 39               # Use Fedora 39
    $0 --clean                           # Clean rebuild and remove after
    $0 --container-name my-build         # Use custom container name

ENVIRONMENT VARIABLES:
    FEDORA_VERSION     Override default Fedora version
    CONTAINER_NAME     Override default container name

REQUIREMENTS:
    - podman installed
    - Git repository with proper tags for versioning
    - Current directory must be the project root

NOTE:
    The container has NO access to \$HOME - only the project files are copied in.
    This provides better isolation and security.

EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --fedora-version)
            FEDORA_VERSION="$2"
            shift 2
            ;;
        --container-name)
            CONTAINER_NAME="$2"
            shift 2
            ;;
        --clean)
            CLEAN_CONTAINER=true
            shift
            ;;
        --help)
            show_help
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            echo
            show_help
            exit 1
            ;;
    esac
done

# Function to check prerequisites
check_prerequisites() {
    print_info "Checking prerequisites..."

    # Check if we're in the project root
    if [[ ! -f "go.mod" ]] || [[ ! -f ".goreleaser.yml" ]]; then
        print_error "This script must be run from the project root directory"
        exit 1
    fi

    # Check if podman is installed
    if ! command -v podman >/dev/null 2>&1; then
        print_error "podman command not found. Please install podman:"
        echo "  sudo dnf install podman"
        exit 1
    fi

    # Check git repository state
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        print_error "Not in a git repository"
        exit 1
    fi

    print_success "Prerequisites check passed"
}

# Function to manage container
manage_container() {
    print_info "Managing container: $CONTAINER_NAME"

    # Create or verify Go cache volume exists
    if ! podman volume exists "$CACHE_VOLUME_NAME" 2>/dev/null; then
        print_info "Creating Go build cache volume: $CACHE_VOLUME_NAME"
        podman volume create "$CACHE_VOLUME_NAME" >/dev/null
    fi

    # Check if container exists
    if podman ps -a --format "{{.Names}}" | grep -q "^${CONTAINER_NAME}$"; then
        if [[ "$CLEAN_CONTAINER" == "true" ]]; then
            print_info "Removing existing container: $CONTAINER_NAME"
            podman stop "$CONTAINER_NAME" 2>/dev/null || true
            podman rm "$CONTAINER_NAME" || true
        else
            print_info "Using existing container: $CONTAINER_NAME"
            # Ensure container is running
            if ! podman ps --format "{{.Names}}" | grep -q "^${CONTAINER_NAME}$"; then
                print_info "Starting container: $CONTAINER_NAME"
                if ! podman start "$CONTAINER_NAME"; then
                    print_error "Failed to start existing container"
                    exit 1
                fi
            fi
            return 0
        fi
    fi

    # Create new container with Go cache volume mounted
    print_info "Creating new container: $CONTAINER_NAME (Fedora $FEDORA_VERSION)"
    if ! podman create \
        --name "$CONTAINER_NAME" \
        --hostname whereami-build \
        --volume "${CACHE_VOLUME_NAME}:/root/.cache/go-build" \
        "registry.fedoraproject.org/fedora:${FEDORA_VERSION}" \
        sleep infinity; then
        print_error "Failed to create container"
        exit 1
    fi

    # Start the container
    if ! podman start "$CONTAINER_NAME"; then
        print_error "Failed to start container"
        exit 1
    fi

    print_success "Container ready: $CONTAINER_NAME"
}

# Function to install dependencies in container
install_dependencies() {
    print_info "Installing build dependencies in container..."

    # Create dependency installation script
    local dep_script=$(mktemp)
    cat > "$dep_script" << 'DEPS_EOF'
#!/bin/bash
set -e

echo "==> Updating package repositories..."
sudo dnf update -y

echo "==> Installing Go toolchain..."
sudo dnf install -y golang

echo "==> Installing Qt6 development packages..."
sudo dnf install -y \
    qt6-qtbase-devel \
    qt6-qtdeclarative-devel \
    qt6-qtpositioning-devel \
    qt6-qtlocation-devel \
    qt6-qtsvg-devel

echo "==> Installing build tools..."
sudo dnf install -y \
    gcc \
    gcc-c++ \
    make \
    git \
    rpm-build \
    rpmdevtools

echo "==> Installing GoReleaser..."
# Download and install goreleaser
GORELEASER_VERSION="2.4.0"
GORELEASER_URL="https://github.com/goreleaser/goreleaser/releases/download/v${GORELEASER_VERSION}/goreleaser_Linux_x86_64.tar.gz"
curl -sL "$GORELEASER_URL" -o /tmp/goreleaser.tar.gz
sudo tar -xzf /tmp/goreleaser.tar.gz -C /usr/local/bin goreleaser
rm -f /tmp/goreleaser.tar.gz
sudo chmod +x /usr/local/bin/goreleaser

echo "==> Installing miqt-rcc..."
# Install to /usr/local/bin so it's available system-wide
GOBIN=/usr/local/bin sudo -E go install github.com/mappu/miqt/cmd/miqt-rcc@latest

echo "==> Dependency installation complete"
DEPS_EOF

    chmod +x "$dep_script"

    # Copy and run dependency installation in container
    local container_script="/tmp/install-deps.sh"
    if ! podman cp "$dep_script" "${CONTAINER_NAME}:${container_script}"; then
        rm -f "$dep_script"
        print_error "Failed to copy dependency script to container"
        exit 1
    fi

    if ! podman exec "$CONTAINER_NAME" bash "$container_script"; then
        rm -f "$dep_script"
        print_error "Failed to install dependencies in container"
        exit 1
    fi

    rm -f "$dep_script"
    print_success "Dependencies installed successfully"
}

# Function to run the build
run_build() {
    print_info "Running goreleaser in container..."

    # Get the container ID
    local container_id
    container_id=$(podman ps -a --filter "name=$CONTAINER_NAME" --format "{{.ID}}" | head -1)

    if [[ -z "$container_id" ]]; then
        print_error "Container $CONTAINER_NAME not found"
        exit 1
    fi

    # Ensure container is running
    if ! podman ps --filter "id=$container_id" --format "{{.ID}}" | grep -q "$container_id"; then
        print_info "Starting container..."
        podman start "$container_id" >/dev/null
    fi

    # Create a temporary directory in the container for the project
    local container_project_dir="/tmp/whereami-build"

    # Copy project files to container (excluding .git, build artifacts, etc.)
    print_info "Copying project files to container..."
    if ! tar -C "$PROJECT_ROOT" -czf - \
         --exclude='.git' \
         --exclude='build-dir' \
         --exclude='export-dir' \
         --exclude='dist' \
         --exclude='*.flatpak' \
         --exclude='vendor' \
         . | podman exec -i "$container_id" tar -xzf - -C /tmp --transform="s,^,whereami-build/,"; then
        print_error "Failed to copy project files"
        exit 1
    fi

    # Run build in container with isolated environment
    if ! podman exec -it "$container_id" \
         bash -c "cd '$container_project_dir' && FEDORA_VERSION=\$(rpm -E %fedora) goreleaser release --config .goreleaser.yml --snapshot --clean"; then
        print_error "Build failed in container"
        exit 1
    fi

    # Copy build artifacts back to host
    print_info "Copying build artifacts back to host..."
    if ! podman exec "$container_id" tar -czf - -C "$container_project_dir" dist | tar -xzf - -C "$PROJECT_ROOT"; then
        print_error "Failed to copy build artifacts"
        exit 1
    fi

    print_success "RPM build completed successfully"
}

# Function to cleanup container
cleanup_container() {
    print_info "Stopping container: $CONTAINER_NAME"
    podman stop "$CONTAINER_NAME" 2>/dev/null || true

    if [[ "$CLEAN_CONTAINER" == "true" ]]; then
        print_info "Removing container: $CONTAINER_NAME"
        podman rm "$CONTAINER_NAME" || true
        print_success "Container removed"
    else
        print_info "Keeping container: $CONTAINER_NAME"
        echo "To remove later, run: podman rm $CONTAINER_NAME"
    fi
}

# Function to show build results
show_results() {
    print_success "Build process completed!"
    echo
    print_info "Built RPM packages:"
    find "$PROJECT_ROOT/dist" -name "*.rpm" 2>/dev/null | while read -r rpm; do
        echo "  $(basename "$rpm")"
    done || print_warning "No RPM files found in dist/ directory"

    echo
    print_info "To install the RPM:"
    echo "  sudo dnf install dist/*.rpm"
    echo
    print_info "To test the RPM:"
    echo "  rpm -qpl dist/*.rpm  # List package contents"
    echo "  rpm -qpi dist/*.rpm  # Show package info"
}

# Main execution
main() {
    print_msg "$BLUE" "ℹ Starting whereami RPM build using Fedora container"
    print_info "Fedora version: $FEDORA_VERSION"
    print_info "Container name: $CONTAINER_NAME"
    echo

    # Trap to ensure cleanup on exit if --clean specified
    trap cleanup_container EXIT

    check_prerequisites
    manage_container
    install_dependencies
    run_build
    show_results
}

# Run main function
main "$@"
